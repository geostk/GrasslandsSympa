#+TITLE: Analyze of grasslands biodiversity/heterogeneity
#+SUBTITLE: MUESLI
#+OPTIONS: toc:t todo:nil tags:nil
#+LATEX_CLASS: koma-article
#+LATEX_CLASS_OPTIONS: [a4paper,11pt,DIV=16]
#+LATEX_HEADER:\usepackage[french]{babel}\usepackage{minted}\usemintedstyle{emacs}\usepackage{booktabs}
#+TODO: TODO INPROGRESS DONE                       

* Convenient functions
** Global import
#+BEGIN_SRC python :tangle Codes/muesli_functions.py
import scipy as sp
import sqlite3
#+END_SRC
** Extract only two bands from the data
#+BEGIN_SRC python :tangle Codes/muesli_functions.py
def read2bands(DB,b1,b2):
    """The function  reads two bands  from the database and  group samples
    with the same ID.

    """

    # Create a SQL connection - No check if the DB exists !
    con = sqlite3.connect(DB) 
    cursor = con.cursor()

    # Get the IDs
    id_pp = []
    for row in cursor.execute("SELECT id FROM output WHERE band_0 > 0"): # Read only grasslands that intersect with the MUESLI area
        if row[0] not in id_pp:
            id_pp.append(row[0])

    # Load one grassland per iteration
    X = list()
    for id_ in id_pp:
        # Load variables
        X_ = list()
        for row in cursor.execute("SELECT band_{}, band_{} FROM output WHERE id=?".format(b1,b2),(id_,)):
            tp = sp.asarray(row).astype(float)
            if not sp.isnan(tp).any(): # Check for nan values
                X_.append(tp)
        X.append(sp.asarray(X_))

    return X,id_pp
#+END_SRC

* Pre-processing
** 
* Processing
** NDVI 

For all the grasslands, the NDVI is computed and the density plot is estimated.

#+BEGIN_SRC python :tangle Codes/ndvi_per_grasslands.py :exports codes
import muesli_functions as mf
import matplotlib.pyplot as plt
import matplotlib
matplotlib.style.use('ggplot')
from sklearn.neighbors import KernelDensity
from sklearn.model_selection import GridSearchCV
import scipy as sp

# Options
PLOT_DENSITY = True

# Load samples
X,Y = mf.read2bands("/media/Data/Data/MUESLI/spectresPrairies/Data/prairie_half.sqlite",70,106)
print("Load {} grasslands".format(len(X)))

# Compute NDVI
NDVI = []
for i in xrange(len(X)):
    X_ = X[i]
    # Compute safe version of NDVI
    DENOM = (X_[:,1]+X_[:,0])
    t = sp.where(DENOM>0)[0]    
    NDVI_ = (X_[t,1]-X_[t,0])/DENOM[t]
    if len(NDVI_) > 0:
        NDVI.append(NDVI_)

print("Compute NDVI for {} grasslands".format(len(NDVI)))

if PLOT_DENSITY:
    ndvi_grid = sp.linspace(0, 1, 1000)[:, sp.newaxis]
    for i in xrange(len(NDVI)):
        print "Compute id:{}".format(Y[i])
        grid = GridSearchCV(KernelDensity(),
                            {'bandwidth': sp.linspace(0.001, 0.1, 10)},
                            cv=5, n_jobs=-1)
        NDVI_ = NDVI[i][:,sp.newaxis]
        grid.fit(NDVI_)
        kde = grid.best_estimator_
        pdf = sp.exp(kde.score_samples(ndvi_grid))
        plt.figure()
        plt.plot(ndvi_grid,pdf,linewidth=3,alpha=0.75)
        plt.plot(NDVI_,-0.5 - 0.2 * sp.random.random(NDVI_.size),'ko',alpha=0.25)
        plt.title('Grasslands number {0} of size {1}. Optimal bw={2}'.format(Y[i],NDVI_.shape[0],kde.bandwidth))
        plt.grid(True)
        plt.savefig("/media/Data/Data/MUESLI/spectresPrairies/Figures/density_ndvi_{}.png".format(Y[i]),dpi=300)
        plt.close()
#+END_SRC

We can plot the estimated density

#+BEGIN_SRC bash :exports results :results raw outputs
for i in Figures/density_ndvi_*png
do
    echo \#+ATTR_HTML: :width 500px :style "display:inline"
    echo [[file:./${i}]]
done
#+END_SRC

#+RESULTS:
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_100.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_103.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_104.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_105.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_106.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_107.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_108.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_109.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_10.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_110.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_111.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_113.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_114.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_115.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_116.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_119.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_11.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_120.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_121.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_122.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_123.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_124.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_125.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_126.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_127.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_128.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_129.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_12.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_130.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_131.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_132.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_133.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_134.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_135.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_136.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_137.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_138.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_13.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_141.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_142.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_143.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_14.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_15.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_16.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_17.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_18.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_1.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_20.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_21.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_22.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_23.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_24.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_25.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_26.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_27.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_28.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_2.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_33.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_35.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_36.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_37.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_38.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_39.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_3.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_42.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_43.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_44.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_46.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_47.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_48.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_49.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_4.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_50.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_51.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_52.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_53.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_54.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_55.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_56.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_57.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_58.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_59.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_5.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_60.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_61.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_62.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_63.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_64.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_65.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_66.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_67.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_68.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_69.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_6.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_70.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_71.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_72.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_73.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_74.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_75.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_76.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_77.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_78.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_79.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_7.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_80.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_81.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_82.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_83.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_84.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_8.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_93.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_94.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_95.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_96.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_97.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_98.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_99.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_9.png]]

* To do 
- [ ] Extract color images of the grasslands

* Configurations                                                   :noexport:
** Changes les images pour inline
#+BEGIN_SRC bash
sed -i 's/.figure { padding: 1em; }*$/.figure { padding: 1em; display:inline }/g' WorkInProgress.html
sed -i 's/.figure p { text-align: center; }*$/.figure p { text-align: center ; display:inline }/g' WorkInProgress.html
#+END_SRC

#+RESULTS:

* Old things                                                       :noexport:
** Clean data
The data  must be cleaned. Some  of the wavelengths are  noisy, due to
water absorption in the atmosphere. The valid domains are

#+ATTR_LATEX: :booktabs t
#+CAPTION: Domain of validity
| Domain | Beginning |  End |
|--------+-----------+------|
|      1 |       400 | 1340 |
|      2 |      1550 | 1800 |
|      3 |      1950 | 2400 |

These parts need to be extracted from the data. The following python code does the job.

#+BEGIN_SRC python 
import scipy as sp
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
matplotlib.style.use('ggplot')


# Parameters
NB = 438
bands = 'band_0'
for b in xrange(1,NB):
    bands += ", band_{}".format(b)

# Create SQL connection
con = sqlite3.connect("prairie_half.sqlite")
cursor = con.cursor()

# Load the data
id_pp = []
for row in cursor.execute("SELECT id FROM output WHERE band_0 > 0"): # Read only grassland inside the MUESLI area
    if row[0] not in id_pp: # Add [0] to the two next row
        id_pp.append(row[0])
    
# Load one grassland per iteration and compute the mean
Y, X = [], []
for id_ in id_pp:
    # Load variables
    cursor.execute("SELECT d, h FROM output WHERE id=? LIMIT 1",(id_,))
    rows_y=cursor.fetchall()
    Y.append([
        float(rows_y[0][0]),
        float(rows_y[0][1])
    ])
    rows_y = None

    # Load samples
    X_ = list()
    for row in cursor.execute("SELECT "+bands+" FROM output WHERE id=?",(id_,)):
        tp = sp.asarray(row).astype(float)
        if not sp.isnan(tp).any(): # Check for nan values
            X_.append(tp)
        
    X.append(sp.asarray(X_).mean(axis=0))

# Close connection
con.close()

# Clean data
X = sp.asarray(X)
mask = sp.where(X[0,:]!=9000)[0]
sp.savez("prairies.npz",X=X,Y=Y,M=mask)

for i in xrange(X.shape[0]):
    plt.plot(X[i,mask])
plt.show()
#+END_SRC

#+BEGIN_SRC python 
import scipy as sp
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
matplotlib.style.use('ggplot')


# Parameters
NB = 438
bands = 'band_0'
for b in xrange(1,NB):
    bands += ", band_{}".format(b)

# Create SQL connection
con = sqlite3.connect("prairie_half.sqlite")
cursor = con.cursor()

# Load the data
id_pp = []
for row in cursor.execute("SELECT id FROM output WHERE band_0 > 0"): # Read only grassland inside the MUESLI area
    if row[0] not in id_pp: 
        id_pp.append(row[0])
    
# Load one grassland per iteration and compute the mean
Y, X = list(), list()
for id_ in id_pp:
    # Load variables
    cursor.execute("SELECT d, h FROM output WHERE id=? LIMIT 1",(id_,))
    rows_y=cursor.fetchall()
    d,h=float(rows_y[0][0]),float(rows_y[0][1])
    rows_y = None

    # Load samples
    for row in cursor.execute("SELECT ogc_fid "+bands+" FROM output WHERE id=?",(id_,)):
        tp = sp.asarray(row[1:]).astype(float)
        if not sp.isnan(tp).any(): # Check for nan values
            X.append(tp)
            Y.append([d,h,row[0]])
# Close connection
con.close()

# Clean data
X, Y = sp.asarray(X), sp.asarray(Y)
print X.shape
print Y.shape
mask = sp.where(X[0,:]!=9000)[0]
sp.savez("prairiesFull.npz",X=X,Y=Y,M=mask)
#+END_SRC
** Learning step

#+BEGIN_SRC python
import lms
import scipy as sp
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
# Load data
data = sp.load("prairiesFull.npz")
X, Y, M = data['X'], data['Y'], data['M']

# Scale data
scaler = StandardScaler()
X = scaler.fit_transform(X[:,M])

# Split data
xt, xT, yt, yT = train_test_split(X,Y[:,1],test_size=0.25,random_state=0)

# Learn
SIG = 2.0**sp.arange(-4,5)
THETA = 10.0**sp.arange(-10,10)

model = lms.KLMS()
ids,rmse=model.forward_feature_extraction(xt,yt,SIG,delta=-100,maxvar=3,v=5)
print("Best Ids: {}".format(ids))
print("RMSE: {}".format(rmse))

res = model.cross_validation(xt[:,ids],yt,SIG,learn_model=1,output=1,v=5)
print("Best parameters: sig = {0} and theta = {1}".format(res[0],res[1]))
print("Best R2: {0}".format(res[2]))

yp=model.predict(xT[:,ids],xt[:,ids])
r = 1 - sp.mean((yp-yT)**2)/sp.var(yT)
print r
plt.figure()
plt.scatter(yT,yp,s=100,c=(yT-yp)**2)
plt.show()
#+END_SRC
** Unsupervised learning
 #+BEGIN_SRC python
import scipy as sp
import sqlite3
import hdda
import matplotlib.pyplot as plt
import matplotlib
matplotlib.style.use('ggplot')
import csv

# Parameters
NB = 438
bands = 'band_0'
for b in xrange(1,NB):
    bands += ", band_{}".format(b)

# Create SQL connection
con = sqlite3.connect("prairie_half.sqlite")
cursor = con.cursor()

# Load all samples
X,Y = list(),list()
for row in cursor.execute("SELECT id, "+bands+" FROM output where band_0 > 0"):
    tp = sp.asarray(row[1:]).astype(float)
    if not sp.isnan(tp).any(): # Check for nan values
        X.append(tp)
        Y.append(row[0])

# Close connection
con.close()
X, Y = sp.asarray(X), sp.asarray(Y)
print X.shape

# Learn
BIC, ICL = [], []
NCLASS = range(10,80,5)
for c in NCLASS:
    print c
    param = {'th':0.1,'C':c,'tol':0.00001}
    model = hdda.HDGMM(model='M4')
    out = model.fit(X[::10,X[0,:]!=9000],param=param)
    if out == 1:
        ICL.append(model.icl)
        BIC.append(model.bic)
        print("Number of iteration: {}".format(model.niter)) 
    else:
        ICL.append(sp.nan)
        BIC.append(sp.nan)
dICL = sp.diff(ICL)
dBIC = sp.diff(BIC)
print dICL/dICL.max()
print dBIC/dBIC.max()

with open('criteria.csv','wb') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(('Number of class','ICL','BIC'))
    for row in zip(NCLASS,ICL,BIC):
        writer.writerow(row)   
#+END_SRC
** Spectral Variation Hypothesis

#+BEGIN_SRC python
import scipy as sp
from scipy import spatial,linalg,stats
import matplotlib.pyplot as plt
import matplotlib
matplotlib.style.use('ggplot')

# Load data
data = sp.load("prairiesFull.npz")
X, Y, M = data['X'], data['Y'], data['M']
d = sp.unique(Y[:,0])
h = sp.unique(Y[:,1])
sv,svn = [],[]
for d_ in d:
    id = sp.where(Y[:,0]==d_)[0]
    Xt = X[id[:,sp.newaxis],M]
    Xtm = Xt.mean(axis=0)[sp.newaxis,:]
    sv.append(spatial.distance.cdist(Xt,Xtm, 'sqeuclidean').mean())
    cov = sp.cov(Xt,rowvar=0)
    covu = linalg.triu(cov)
    svn.append(covu[covu!=0].sum())
print stats.pearsonr(sp.log(sv),d)
print stats.pearsonr(sp.log(svn),d)
print stats.pearsonr(sv,d)
print stats.pearsonr(svn,d)

print stats.pearsonr(sp.log(sv),h)
print stats.pearsonr(sp.log(svn),h)
print stats.pearsonr(sv,h)
print stats.pearsonr(svn,h)

# plt.figure()
# plt.scatter(sp.log(svn),d)
# plt.figure()
# plt.scatter(sp.log(svn),h)
# plt.figure()
# plt.scatter(sp.log(sv),sp.log(svn))
# plt.show()
#+END_SRC

#+RESULTS:
