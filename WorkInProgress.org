#+TITLE: Analyze of grasslands biodiversity/heterogeneity
#+SUBTITLE: MUESLI
#+OPTIONS: toc:t todo:nil tags:nil
#+LATEX_CLASS: koma-article
#+LATEX_CLASS_OPTIONS: [a4paper,11pt,DIV=16]
#+LATEX_HEADER:\usepackage[french]{babel}\usepackage{minted}\usemintedstyle{emacs}\usepackage{booktabs}
#+TODO: TODO INPROGRESS DONE                       

* Convenient functions
** Global import
#+BEGIN_SRC python :tangle Codes/muesli_functions.py
import scipy as sp
import sqlite3
#+END_SRC
** Extract only two bands from the data
#+BEGIN_SRC python :tangle Codes/muesli_functions.py
def read2bands(DB,b1,b2):
    """The function  reads two bands  from the database and  group samples
    with the same ID.

    """

    # Create a SQL connection - No check if the DB exists !
    con = sqlite3.connect(DB) 
    cursor = con.cursor()

    # Get the IDs
    id_pp = []
    for row in cursor.execute("SELECT id FROM output WHERE band_0 > 0"): # Read only grasslands that intersect with the MUESLI area
        if row[0] not in id_pp:
            id_pp.append(row[0])

    # Load one grassland per iteration
    X = list()
    for id_ in id_pp:
        # Load variables
        X_ = list()
        for row in cursor.execute("SELECT band_{}, band_{} FROM output WHERE id=?".format(b1,b2),(id_,)):
            tp = sp.asarray(row).astype(float)
            if not sp.isnan(tp).any(): # Check for nan values
                X_.append(tp)
        X.append(sp.asarray(X_))

    return X,id_pp
#+END_SRC

* Pre-processing
** Extraction of the training samples
All  the samples  are extracted  from the  Grasslands, and  grouped by
id. It is possible to use less samples by changing the strategy in the
=otbxli_SampleSelection= app.

#+BEGIN_SRC sh :tangle Codes/samples_extraction_otb.sh
# Class statistics
FIELD='id'
otbcli_PolygonClassStatistics -in /mnt/Data_1/MUESLI/VNIR_SWIR_2m/L1c/atm/mosaic.tif \
			      -vec all_prairies_indices_emp_auch.shp \
			      -out classStat_${FIELD}.xml \
			      -field ${FIELD}

# Samples selection
otbcli_SampleSelection -in /mnt/Data_1/MUESLI/VNIR_SWIR_2m/L1c/atm/mosaic.tif \
		       -vec all_prairies_indices_emp_auch.shp \
		       -out samplesSelected_${FIELD}.sqlite \
		       -instats classStat_${FIELD}.xml \
		       -field ${FIELD} \
		       -strategy all  -ram 8192

# Samples Extraction
otbcli_SampleExtraction -in /mnt/Data_1/MUESLI/VNIR_SWIR_2m/L1c/atm/mosaic.tif \
			 -vec samplesSelected_${FIELD}.sqlite \
			 -out prairie_${FIELD}.sqlite \
			 -outfield prefix \
			 -outfield.prefix.name band_ \
			 -field ${FIELD} -ram 8192
#+END_SRC
** Filtering the noisy spectral bands
The data  must be cleaned. Some  of the wavelengths are  noisy, due to
water  absorption in  the  atmosphere.  Thus we  choose  to work  with
reduced spectral domains, which are given in the table [[tab:ranges]].

#+CAPTION: Domain of validity.
#+NAME: tab:ranges
| Domain | Beginning |  End |
|--------+-----------+------|
|      1 |       400 | 1340 |
|      2 |      1550 | 1800 |
|      3 |      1980 | 2400 |

Given the wavelength provided in the =.hdr= files, we have the following
band number / wavelength correspondences reported in table [[tab:wave]].

#+CAPTION: Wavelengths as a function of band number.
#+NAME: tab:wave
| Band number |          1 |          2 |          3 |          4 |          5 |          6 |          7 |          8 |        9 |         10 |        11 |         12 |         13 |         14 |         15 |         16 |         17 |         18 |         19 |         20 |         21 |         22 |         23 |         24 |         25 |         26 |         27 |         28 |         29 |        30 |         31 |        32 |         33 |         34 |         35 |         36 |         37 |         38 |         39 |         40 |         41 |         42 |         43 |         44 |         45 |         46 |         47 |         48 |         49 |         50 |        51 |         52 |        53 |         54 |         55 |         56 |         57 |         58 |         59 |         60 |         61 |         62 |         63 |         64 |         65 |         66 |         67 |         68 |         69 |         70 |         71 |        72 |         73 |        74 |         75 |         76 |         77 |         78 |         79 |         80 |         81 |         82 |         83 |         84 |         85 |         86 |         87 |         88 |         89 |         90 |         91 |         92 |        93 |         94 |        95 |         96 |        97 |         98 |         99 |        100 |        101 |        102 |        103 |        104 |        105 |        106 |        107 |        108 |        109 |        110 |        111 |        112 |        113 |     114 |        115 |       116 |        117 |       118 |        119 |        120 |        121 |        122 |        123 |        124 |        125 |        126 |        127 |        128 |        129 |        130 |        131 |        132 |        133 |        134 |        135 |        136 |       137 |        138 |       139 |        140 |        141 |        142 |        143 |        144 |        145 |        146 |        147 |        148 |        149 |        150 |        151 |        152 |        153 |        154 |        155 |       156 |        157 |        158 |        159 |         160 |         161 |         162 |         163 |         164 |         165 |         166 |         167 |         168 |         169 |         170 |         171 |         172 |         173 |         174 |         175 |         176 |         177 |         178 |         179 |         180 |         181 |         182 |         183 |         184 |         185 |         186 |         187 |         188 |         189 |         190 |         191 |         192 |         193 |         194 |         195 |         196 |         197 |         198 |         199 |         200 |         201 |         202 |         203 |         204 |         205 |         206 |         207 |         208 |        209 |         210 |       211 |         212 |        213 |         214 |        215 |         216 |        217 |         218 |        219 |         220 |        221 |         222 |         223 |         224 |         225 |         226 |         227 |         228 |         229 |         230 |         231 |         232 |         233 |         234 |         235 |         236 |         237 |         238 |         239 |         240 |         241 |         242 |         243 |         244 |         245 |         246 |         247 |         248 |         249 |         250 |         251 |         252 |         253 |         254 |         255 |         256 |         257 |         258 |         259 |         260 |         261 |         262 |         263 |         264 |         265 |         266 |         267 |         268 |         269 |         270 |         271 |         272 |         273 |         274 |         275 |        276 |         277 |        278 |         279 |        280 |         281 |        282 |         283 |        284 |         285 |        286 |         287 |         288 |         289 |         290 |         291 |         292 |         293 |         294 |         295 |         296 |         297 |         298 |         299 |         300 |         301 |         302 |         303 |         304 |         305 |         306 |         307 |         308 |         309 |         310 |         311 |         312 |         313 |         314 |         315 |         316 |         317 |         318 |         319 |         320 |         321 |         322 |         323 |         324 |         325 |         326 |         327 |         328 |         329 |         330 |         331 |         332 |         333 |         334 |         335 |         336 |         337 |         338 |         339 |         340 |        341 |         342 |        343 |         344 |       345 |         346 |        347 |         348 |        349 |         350 |        351 |         352 |         353 |         354 |         355 |         356 |         357 |         358 |         359 |         360 |         361 |         362 |         363 |         364 |         365 |         366 |         367 |         368 |         369 |         370 |         371 |         372 |         373 |         374 |         375 |         376 |         377 |         378 |         379 |         380 |         381 |         382 |         383 |         384 |         385 |         386 |         387 |         388 |         389 |         390 |         391 |         392 |         393 |         394 |         395 |         396 |         397 |         398 |         399 |         400 |         401 |         402 |         403 |         404 |         405 |        406 |         407 |        408 |         409 |        410 |         411 |        412 |         413 |        414 |         415 |        416 |         417 |         418 |         419 |         420 |         421 |         422 |         423 |         424 |         425 |         426 |         427 |         428 |         429 |         430 |         431 |         432 |         433 |         434 |         435 |         436 |         437 |         438 |
||
| Wavelenghth | 414.681622 | 418.320307 | 421.958992 | 425.597676 | 429.236361 | 432.875046 | 436.513731 | 440.152415 | 443.7911 | 447.429785 | 451.06847 | 454.707155 | 458.345839 | 461.984524 | 465.623209 | 469.261894 | 472.900578 | 476.539263 | 480.177948 | 483.816633 | 487.455317 | 491.094002 | 494.732687 | 498.371372 | 502.010056 | 505.648741 | 509.287426 | 512.926111 | 516.564796 | 520.20348 | 523.842165 | 527.48085 | 531.119535 | 534.758219 | 538.396904 | 542.035589 | 545.674274 | 549.312958 | 552.951643 | 556.590328 | 560.229013 | 563.867697 | 567.506382 | 571.145067 | 574.783752 | 578.422437 | 582.061121 | 585.699806 | 589.338491 | 592.977176 | 596.61586 | 600.254545 | 603.89323 | 607.531915 | 611.170599 | 614.809284 | 618.447969 | 622.086654 | 625.725338 | 629.364023 | 633.002708 | 636.641393 | 640.280078 | 643.918762 | 647.557447 | 651.196132 | 654.834817 | 658.473501 | 662.112186 | 665.750871 | 669.389556 | 673.02824 | 676.666925 | 680.30561 | 683.944295 | 687.582979 | 691.221664 | 694.860349 | 698.499034 | 702.137719 | 705.776403 | 709.415088 | 713.053773 | 716.692458 | 720.331142 | 723.969827 | 727.608512 | 731.247197 | 734.885881 | 738.524566 | 742.163251 | 745.801936 | 749.44062 | 753.079305 | 756.71799 | 760.356675 | 763.99536 | 767.634044 | 771.272729 | 774.911414 | 778.550099 | 782.188783 | 785.827468 | 789.466153 | 793.104838 | 796.743522 | 800.382207 | 804.020892 | 807.659577 | 811.298261 | 814.936946 | 818.575631 | 822.214316 | 825.853 | 829.491685 | 833.13037 | 836.769055 | 840.40774 | 844.046424 | 847.685109 | 851.323794 | 854.962479 | 858.601163 | 862.239848 | 865.878533 | 869.517218 | 873.155902 | 876.794587 | 880.433272 | 884.071957 | 887.710641 | 891.349326 | 894.988011 | 898.626696 | 902.265381 | 905.904065 | 909.54275 | 913.181435 | 916.82012 | 920.458804 | 924.097489 | 927.736174 | 931.374859 | 935.013543 | 938.652228 | 942.290913 | 945.929598 | 949.568282 | 953.206967 | 956.845652 | 960.484337 | 964.123022 | 967.761706 | 971.400391 | 977.281135 | 982.74497 | 988.208806 | 993.672641 | 999.136476 | 1004.600311 | 1010.064146 | 1015.527981 | 1020.991816 | 1026.455651 | 1031.919486 | 1037.383321 | 1042.847156 | 1048.310991 | 1053.774826 | 1059.238662 | 1064.702497 | 1070.166332 | 1075.630167 | 1081.094002 | 1086.557837 | 1092.021672 | 1097.485507 | 1102.949342 | 1108.413177 | 1113.877012 | 1119.340847 | 1124.804682 | 1130.268518 | 1135.732353 | 1141.196188 | 1146.660023 | 1152.123858 | 1157.587693 | 1163.051528 | 1168.515363 | 1173.979198 | 1179.443033 | 1184.906868 | 1190.370703 | 1195.834538 | 1201.298374 | 1206.762209 | 1212.226044 | 1217.689879 | 1223.153714 | 1228.617549 | 1234.081384 | 1239.545219 | 1245.009054 | 1250.472889 | 1255.936724 | 1261.400559 | 1266.864394 | 1272.32823 | 1277.792065 | 1283.2559 | 1288.719735 | 1294.18357 | 1299.647405 | 1305.11124 | 1310.575075 | 1316.03891 | 1321.502745 | 1326.96658 | 1332.430415 | 1337.89425 | 1343.358086 | 1348.821921 | 1354.285756 | 1359.749591 | 1365.213426 | 1370.677261 | 1376.141096 | 1381.604931 | 1387.068766 | 1392.532601 | 1397.996436 | 1403.460271 | 1408.924106 | 1414.387942 | 1419.851777 | 1425.315612 | 1430.779447 | 1436.243282 | 1441.707117 | 1447.170952 | 1452.634787 | 1458.098622 | 1463.562457 | 1469.026292 | 1474.490127 | 1479.953962 | 1485.417798 | 1490.881633 | 1496.345468 | 1501.809303 | 1507.273138 | 1512.736973 | 1518.200808 | 1523.664643 | 1529.128478 | 1534.592313 | 1540.056148 | 1545.519983 | 1550.983818 | 1556.447654 | 1561.911489 | 1567.375324 | 1572.839159 | 1578.302994 | 1583.766829 | 1589.230664 | 1594.694499 | 1600.158334 | 1605.622169 | 1611.086004 | 1616.549839 | 1622.013674 | 1627.477509 | 1632.941345 | 1638.40518 | 1643.869015 | 1649.33285 | 1654.796685 | 1660.26052 | 1665.724355 | 1671.18819 | 1676.652025 | 1682.11586 | 1687.579695 | 1693.04353 | 1698.507365 | 1703.971201 | 1709.435036 | 1714.898871 | 1720.362706 | 1725.826541 | 1731.290376 | 1736.754211 | 1742.218046 | 1747.681881 | 1753.145716 | 1758.609551 | 1764.073386 | 1769.537221 | 1775.001057 | 1780.464892 | 1785.928727 | 1791.392562 | 1796.856397 | 1802.320232 | 1807.784067 | 1813.247902 | 1818.711737 | 1824.175572 | 1829.639407 | 1835.103242 | 1840.567077 | 1846.030913 | 1851.494748 | 1856.958583 | 1862.422418 | 1867.886253 | 1873.350088 | 1878.813923 | 1884.277758 | 1889.741593 | 1895.205428 | 1900.669263 | 1906.133098 | 1911.596933 | 1917.060769 | 1922.524604 | 1927.988439 | 1933.452274 | 1938.916109 | 1944.379944 | 1949.843779 | 1955.307614 | 1960.771449 | 1966.235284 | 1971.699119 | 1977.162954 | 1982.626789 | 1988.090625 | 1993.55446 | 1999.018295 | 2004.48213 | 2009.945965 | 2015.4098 | 2020.873635 | 2026.33747 | 2031.801305 | 2037.26514 | 2042.728975 | 2048.19281 | 2053.656645 | 2059.120481 | 2064.584316 | 2070.048151 | 2075.511986 | 2080.975821 | 2086.439656 | 2091.903491 | 2097.367326 | 2102.831161 | 2108.294996 | 2113.758831 | 2119.222666 | 2124.686501 | 2130.150337 | 2135.614172 | 2141.078007 | 2146.541842 | 2152.005677 | 2157.469512 | 2162.933347 | 2168.397182 | 2173.861017 | 2179.324852 | 2184.788687 | 2190.252522 | 2195.716357 | 2201.180193 | 2206.644028 | 2212.107863 | 2217.571698 | 2223.035533 | 2228.499368 | 2233.963203 | 2239.427038 | 2244.890873 | 2250.354708 | 2255.818543 | 2261.282378 | 2266.746213 | 2272.210049 | 2277.673884 | 2283.137719 | 2288.601554 | 2294.065389 | 2299.529224 | 2304.993059 | 2310.456894 | 2315.920729 | 2321.384564 | 2326.848399 | 2332.312234 | 2337.776069 | 2343.239905 | 2348.70374 | 2354.167575 | 2359.63141 | 2365.095245 | 2370.55908 | 2376.022915 | 2381.48675 | 2386.950585 | 2392.41442 | 2397.878255 | 2403.34209 | 2408.805925 | 2414.269761 | 2419.733596 | 2425.197431 | 2430.661266 | 2436.125101 | 2441.588936 | 2447.052771 | 2452.516606 | 2457.980441 | 2463.444276 | 2468.908111 | 2474.371946 | 2479.835781 | 2485.299617 | 2490.763452 | 2496.227287 | 2501.691122 | 2507.154957 | 2512.618792 | 2518.082627 | 2523.546462 |

We get the  bands number given in table [[tab:select:bands]],  for a total
of 345 spectral bands.
#+CAPTION: Selected bands, border included.
#+NAME: tab:select:bands
| Domain | Beginning |   End |   # |
|--------+-----------+-------+-----|
|      1 |         1 |   221 | 221 |
|      2 |       260 |   306 |  47 |
|      3 |       339 |   415 |  77 |
|--------+-----------+-------+-----|
|        |           | Total | 345 |
#+TBLFM: $4=$3-$2+1::@5$4=vsum(@I$4..@II$4)

The following  lines on  Python provides  the string  to be  used with
=sqlite3= to load only these bands.

#+BEGIN_SRC python :results output :exports code
# Python indices start at zero: need to "-1" the band number
bands = 'band_0'

for b in xrange(1,221):
    bands += ", band_{}".format(b)

for b in xrange(259,306):
    bands += ", band_{}".format(b)

for b in xrange(338,415):
    bands += ", band_{}".format(b)

print(bands)
#+END_SRC

#+RESULTS:
: band_0, band_1, band_2, band_3, band_4, band_5, band_6, band_7, band_8, band_9, band_10, band_11, band_12, band_13, band_14, band_15, band_16, band_17, band_18, band_19, band_20, band_21, band_22, band_23, band_24, band_25, band_26, band_27, band_28, band_29, band_30, band_31, band_32, band_33, band_34, band_35, band_36, band_37, band_38, band_39, band_40, band_41, band_42, band_43, band_44, band_45, band_46, band_47, band_48, band_49, band_50, band_51, band_52, band_53, band_54, band_55, band_56, band_57, band_58, band_59, band_60, band_61, band_62, band_63, band_64, band_65, band_66, band_67, band_68, band_69, band_70, band_71, band_72, band_73, band_74, band_75, band_76, band_77, band_78, band_79, band_80, band_81, band_82, band_83, band_84, band_85, band_86, band_87, band_88, band_89, band_90, band_91, band_92, band_93, band_94, band_95, band_96, band_97, band_98, band_99, band_100, band_101, band_102, band_103, band_104, band_105, band_106, band_107, band_108, band_109, band_110, band_111, band_112, band_113, band_114, band_115, band_116, band_117, band_118, band_119, band_120, band_121, band_122, band_123, band_124, band_125, band_126, band_127, band_128, band_129, band_130, band_131, band_132, band_133, band_134, band_135, band_136, band_137, band_138, band_139, band_140, band_141, band_142, band_143, band_144, band_145, band_146, band_147, band_148, band_149, band_150, band_151, band_152, band_153, band_154, band_155, band_156, band_157, band_158, band_159, band_160, band_161, band_162, band_163, band_164, band_165, band_166, band_167, band_168, band_169, band_170, band_171, band_172, band_173, band_174, band_175, band_176, band_177, band_178, band_179, band_180, band_181, band_182, band_183, band_184, band_185, band_186, band_187, band_188, band_189, band_190, band_191, band_192, band_193, band_194, band_195, band_196, band_197, band_198, band_199, band_200, band_201, band_202, band_203, band_204, band_205, band_206, band_207, band_208, band_209, band_210, band_211, band_212, band_213, band_214, band_215, band_216, band_217, band_218, band_219, band_220, band_259, band_260, band_261, band_262, band_263, band_264, band_265, band_266, band_267, band_268, band_269, band_270, band_271, band_272, band_273, band_274, band_275, band_276, band_277, band_278, band_279, band_280, band_281, band_282, band_283, band_284, band_285, band_286, band_287, band_288, band_289, band_290, band_291, band_292, band_293, band_294, band_295, band_296, band_297, band_298, band_299, band_300, band_301, band_302, band_303, band_304, band_305, band_338, band_339, band_340, band_341, band_342, band_343, band_344, band_345, band_346, band_347, band_348, band_349, band_350, band_351, band_352, band_353, band_354, band_355, band_356, band_357, band_358, band_359, band_360, band_361, band_362, band_363, band_364, band_365, band_366, band_367, band_368, band_369, band_370, band_371, band_372, band_373, band_374, band_375, band_376, band_377, band_378, band_379, band_380, band_381, band_382, band_383, band_384, band_385, band_386, band_387, band_388, band_389, band_390, band_391, band_392, band_393, band_394, band_395, band_396, band_397, band_398, band_399, band_400, band_401, band_402, band_403, band_404, band_405, band_406, band_407, band_408, band_409, band_410, band_411, band_412, band_413, band_414

* Processing
** Extract color images
We first need to get the number of grasslands in the shapefile. 

#+BEGIN_SRC python :exports both :results output
from osgeo import ogr,gdalconst

# Data name
inVector = "Data/all_prairies_indices_emp_auch.shp"
driver = ogr.GetDriverByName('ESRI Shapefile')

# Open data
vectorIn = driver.Open(inVector, gdalconst.GA_ReadOnly)
layerIn = vectorIn.GetLayer()

print layerIn.GetFeatureCount()
#+END_SRC

#+RESULTS:
: 192

Then  we  will iterate  over  each  entity (grasslands),  extract  its
polygons, warp the "aperçu" to extract the image.
#+BEGIN_SRC sh :tangle Codes/extract_color.sh
for i in `seq 1 192`
do
    # Extract the polygon
    ogr2ogr -f "ESRI Shapefile" /tmp/temp.shp -where "ID = ${i}" ../Data/all_prairies_indices_emp_auch.shp

    # Warp the aperçu
    gdalwarp -cutline /tmp/temp.shp -crop_to_cutline -dstalpha /mnt/Data_1/MUESLI/VNIR_SWIR_2m/L1c/apercu/ENVI/MUESLI_mos_VNIR_SWIR_268_208_123_ENVI Figures/color_${i}.tif
    
    # Clean data
    rm /tmp/temp.*
done
#+END_SRC
** NDVI 
For all the  grasslands, the NDVI is computed and  the density plot is
estimated. To compute the NDVI we  need the wavelength 800nm and 670nm
which correspond, from table [[tab:wave]], to the bands number 106 and 70,
respectively.

#+BEGIN_SRC python :tangle Codes/ndvi_per_grasslands.py :exports codes
import muesli_functions as mf
import matplotlib.pyplot as plt
import matplotlib
matplotlib.style.use('ggplot')
from sklearn.neighbors import KernelDensity
from sklearn.model_selection import GridSearchCV
import scipy as sp

# Options
PLOT_DENSITY = True

# Load samples
X,Y = mf.read2bands("/media/Data/Data/MUESLI/spectresPrairies/Data/prairie_half.sqlite",70,106)
print("Load {} grasslands".format(len(X)))

# Compute NDVI
NDVI = []
for i in xrange(len(X)):
    X_ = X[i]
    # Compute safe version of NDVI
    DENOM = (X_[:,1]+X_[:,0])
    t = sp.where(DENOM>0)[0]    
    NDVI_ = (X_[t,1]-X_[t,0])/DENOM[t]
    if len(NDVI_) > 0:
        NDVI.append(NDVI_)

print("Compute NDVI for {} grasslands".format(len(NDVI)))

if PLOT_DENSITY:
    ndvi_grid = sp.linspace(0, 1, 1000)[:, sp.newaxis]
    for i in xrange(len(NDVI)):
        print "Compute id:{}".format(Y[i])
        grid = GridSearchCV(KernelDensity(),
                            {'bandwidth': sp.linspace(0.001, 0.1, 10)},
                            cv=5, n_jobs=-1)
        NDVI_ = NDVI[i][:,sp.newaxis]
        grid.fit(NDVI_)
        kde = grid.best_estimator_
        pdf = sp.exp(kde.score_samples(ndvi_grid))
        plt.figure()
        plt.plot(ndvi_grid,pdf,linewidth=3,alpha=0.75)
        plt.plot(NDVI_,-0.5 - 0.2 * sp.random.random(NDVI_.size),'ko',alpha=0.25)
        plt.title('Grasslands number {0} of size {1}. Optimal bw={2}'.format(Y[i],NDVI_.shape[0],kde.bandwidth))
        plt.grid(True)
        plt.savefig("/media/Data/Data/MUESLI/spectresPrairies/Figures/density_ndvi_{}.png".format(Y[i]),dpi=300)
        plt.close()
#+END_SRC

* Plot and images
We can plot the estimated density from the NDVI.

#+BEGIN_SRC bash :exports results :results raw outputs
for i in Figures/density_ndvi_*png
do
    echo \#+ATTR_HTML: :width 500px :style "display:inline"
    echo [[file:./${i}]]
done
#+END_SRC

#+RESULTS:
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_100.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_103.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_104.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_105.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_106.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_107.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_108.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_109.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_10.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_110.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_111.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_113.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_114.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_115.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_116.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_119.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_11.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_120.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_121.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_122.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_123.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_124.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_125.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_126.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_127.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_128.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_129.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_12.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_130.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_131.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_132.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_133.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_134.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_135.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_136.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_137.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_138.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_13.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_141.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_142.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_143.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_14.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_15.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_16.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_17.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_18.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_1.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_20.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_21.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_22.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_23.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_24.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_25.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_26.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_27.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_28.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_2.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_33.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_35.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_36.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_37.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_38.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_39.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_3.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_42.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_43.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_44.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_46.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_47.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_48.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_49.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_4.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_50.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_51.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_52.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_53.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_54.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_55.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_56.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_57.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_58.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_59.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_5.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_60.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_61.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_62.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_63.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_64.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_65.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_66.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_67.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_68.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_69.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_6.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_70.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_71.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_72.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_73.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_74.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_75.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_76.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_77.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_78.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_79.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_7.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_80.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_81.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_82.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_83.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_84.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_8.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_93.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_94.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_95.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_96.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_97.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_98.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_99.png]]
#+ATTR_HTML: :width 500px :style display:inline
[[file:./Figures/density_ndvi_9.png]]

* To do 
- [ ] Extract color images of the grasslands
- [ ] Voir [[file:~/Documents/Recherche/ENSAT/These_Master/Lopes/CR/lopes_work.org::*Journ%C3%A9e%20hyper][Journée hyper]]
- [ ] In NDVI, change the absolute path to relative path
* Configurations                                                   :noexport:
** Changes les images pour inline
#+BEGIN_SRC bash
sed -i 's/.figure { padding: 1em; }*$/.figure { padding: 1em; display:inline }/g' WorkInProgress.html
sed -i 's/.figure p { text-align: center; }*$/.figure p { text-align: center ; display:inline }/g' WorkInProgress.html
cp WorkInProgress.html index.html
#+END_SRC

#+RESULTS:

* Old things                                                       :noexport:
** Clean data
The data  must be cleaned. Some  of the wavelengths are  noisy, due to
water absorption in the atmosphere. The valid domains are

#+ATTR_LATEX: :booktabs t
#+CAPTION: Domain of validity
| Domain | Beginning |  End |
|--------+-----------+------|
|      1 |       400 | 1340 |
|      2 |      1550 | 1800 |
|      3 |      1980 | 2400 |

These parts need to be extracted from the data. The following python code does the job.

#+BEGIN_SRC python 
import scipy as sp
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
matplotlib.style.use('ggplot')


# Parameters
NB = 438
bands = 'band_0'
for b in xrange(1,NB):
    bands += ", band_{}".format(b)

# Create SQL connection
con = sqlite3.connect("prairie_half.sqlite")
cursor = con.cursor()

# Load the data
id_pp = []
for row in cursor.execute("SELECT id FROM output WHERE band_0 > 0"): # Read only grassland inside the MUESLI area
    if row[0] not in id_pp: # Add [0] to the two next row
        id_pp.append(row[0])
    
# Load one grassland per iteration and compute the mean
Y, X = [], []
for id_ in id_pp:
    # Load variables
    cursor.execute("SELECT d, h FROM output WHERE id=? LIMIT 1",(id_,))
    rows_y=cursor.fetchall()
    Y.append([
        float(rows_y[0][0]),
        float(rows_y[0][1])
    ])
    rows_y = None

    # Load samples
    X_ = list()
    for row in cursor.execute("SELECT "+bands+" FROM output WHERE id=?",(id_,)):
        tp = sp.asarray(row).astype(float)
        if not sp.isnan(tp).any(): # Check for nan values
            X_.append(tp)
        
    X.append(sp.asarray(X_).mean(axis=0))

# Close connection
con.close()

# Clean data
X = sp.asarray(X)
mask = sp.where(X[0,:]!=9000)[0]
sp.savez("prairies.npz",X=X,Y=Y,M=mask)

for i in xrange(X.shape[0]):
    plt.plot(X[i,mask])
plt.show()
#+END_SRC

#+BEGIN_SRC python 
import scipy as sp
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
matplotlib.style.use('ggplot')


# Parameters
NB = 438
bands = 'band_0'
for b in xrange(1,NB):
    bands += ", band_{}".format(b)

# Create SQL connection
con = sqlite3.connect("prairie_half.sqlite")
cursor = con.cursor()

# Load the data
id_pp = []
for row in cursor.execute("SELECT id FROM output WHERE band_0 > 0"): # Read only grassland inside the MUESLI area
    if row[0] not in id_pp: 
        id_pp.append(row[0])
    
# Load one grassland per iteration and compute the mean
Y, X = list(), list()
for id_ in id_pp:
    # Load variables
    cursor.execute("SELECT d, h FROM output WHERE id=? LIMIT 1",(id_,))
    rows_y=cursor.fetchall()
    d,h=float(rows_y[0][0]),float(rows_y[0][1])
    rows_y = None

    # Load samples
    for row in cursor.execute("SELECT ogc_fid "+bands+" FROM output WHERE id=?",(id_,)):
        tp = sp.asarray(row[1:]).astype(float)
        if not sp.isnan(tp).any(): # Check for nan values
            X.append(tp)
            Y.append([d,h,row[0]])
# Close connection
con.close()

# Clean data
X, Y = sp.asarray(X), sp.asarray(Y)
print X.shape
print Y.shape
mask = sp.where(X[0,:]!=9000)[0]
sp.savez("prairiesFull.npz",X=X,Y=Y,M=mask)
#+END_SRC
** Learning step

#+BEGIN_SRC python
import lms
import scipy as sp
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import matplotlib.pyplot as plt
# Load data
data = sp.load("prairiesFull.npz")
X, Y, M = data['X'], data['Y'], data['M']

# Scale data
scaler = StandardScaler()
X = scaler.fit_transform(X[:,M])

# Split data
xt, xT, yt, yT = train_test_split(X,Y[:,1],test_size=0.25,random_state=0)

# Learn
SIG = 2.0**sp.arange(-4,5)
THETA = 10.0**sp.arange(-10,10)

model = lms.KLMS()
ids,rmse=model.forward_feature_extraction(xt,yt,SIG,delta=-100,maxvar=3,v=5)
print("Best Ids: {}".format(ids))
print("RMSE: {}".format(rmse))

res = model.cross_validation(xt[:,ids],yt,SIG,learn_model=1,output=1,v=5)
print("Best parameters: sig = {0} and theta = {1}".format(res[0],res[1]))
print("Best R2: {0}".format(res[2]))

yp=model.predict(xT[:,ids],xt[:,ids])
r = 1 - sp.mean((yp-yT)**2)/sp.var(yT)
print r
plt.figure()
plt.scatter(yT,yp,s=100,c=(yT-yp)**2)
plt.show()
#+END_SRC
** Unsupervised learning
 #+BEGIN_SRC python
import scipy as sp
import sqlite3
import hdda
import matplotlib.pyplot as plt
import matplotlib
matplotlib.style.use('ggplot')
import csv

# Parameters
NB = 438
bands = 'band_0'
for b in xrange(1,NB):
    bands += ", band_{}".format(b)

# Create SQL connection
con = sqlite3.connect("prairie_half.sqlite")
cursor = con.cursor()

# Load all samples
X,Y = list(),list()
for row in cursor.execute("SELECT id, "+bands+" FROM output where band_0 > 0"):
    tp = sp.asarray(row[1:]).astype(float)
    if not sp.isnan(tp).any(): # Check for nan values
        X.append(tp)
        Y.append(row[0])

# Close connection
con.close()
X, Y = sp.asarray(X), sp.asarray(Y)
print X.shape

# Learn
BIC, ICL = [], []
NCLASS = range(10,80,5)
for c in NCLASS:
    print c
    param = {'th':0.1,'C':c,'tol':0.00001}
    model = hdda.HDGMM(model='M4')
    out = model.fit(X[::10,X[0,:]!=9000],param=param)
    if out == 1:
        ICL.append(model.icl)
        BIC.append(model.bic)
        print("Number of iteration: {}".format(model.niter)) 
    else:
        ICL.append(sp.nan)
        BIC.append(sp.nan)
dICL = sp.diff(ICL)
dBIC = sp.diff(BIC)
print dICL/dICL.max()
print dBIC/dBIC.max()

with open('criteria.csv','wb') as csvfile:
    writer = csv.writer(csvfile)
    writer.writerow(('Number of class','ICL','BIC'))
    for row in zip(NCLASS,ICL,BIC):
        writer.writerow(row)   
#+END_SRC
** Spectral Variation Hypothesis

#+BEGIN_SRC python
import scipy as sp
from scipy import spatial,linalg,stats
import matplotlib.pyplot as plt
import matplotlib
matplotlib.style.use('ggplot')

# Load data
data = sp.load("prairiesFull.npz")
X, Y, M = data['X'], data['Y'], data['M']
d = sp.unique(Y[:,0])
h = sp.unique(Y[:,1])
sv,svn = [],[]
for d_ in d:
    id = sp.where(Y[:,0]==d_)[0]
    Xt = X[id[:,sp.newaxis],M]
    Xtm = Xt.mean(axis=0)[sp.newaxis,:]
    sv.append(spatial.distance.cdist(Xt,Xtm, 'sqeuclidean').mean())
    cov = sp.cov(Xt,rowvar=0)
    covu = linalg.triu(cov)
    svn.append(covu[covu!=0].sum())
print stats.pearsonr(sp.log(sv),d)
print stats.pearsonr(sp.log(svn),d)
print stats.pearsonr(sv,d)
print stats.pearsonr(svn,d)

print stats.pearsonr(sp.log(sv),h)
print stats.pearsonr(sp.log(svn),h)
print stats.pearsonr(sv,h)
print stats.pearsonr(svn,h)

# plt.figure()
# plt.scatter(sp.log(svn),d)
# plt.figure()
# plt.scatter(sp.log(svn),h)
# plt.figure()
# plt.scatter(sp.log(sv),sp.log(svn))
# plt.show()
#+END_SRC

#+RESULTS:
